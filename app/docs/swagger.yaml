definitions:
  comment.CommentCreate:
    properties:
      message:
        type: string
      photo_id:
        type: string
      user_id:
        type: string
    required:
    - message
    - photo_id
    type: object
  models.AccountRole:
    enum:
    - admin
    - normal
    type: string
    x-enum-varnames:
    - ROLE_ADMIN
    - ROLE_NORMAL
  models.Comment:
    type: object
  models.CreateAccount:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/models.AccountRole'
      username:
        type: string
    required:
    - age
    - email
    - password
    - role
    - username
    type: object
  models.LoginAccount:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.Photo:
    type: object
  photo.PhotoCreate:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
      user_id:
        type: string
    required:
    - caption
    - photo_url
    - title
    type: object
  response.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  response.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  socialmedia.SocialMediaCreate:
    properties:
      name:
        type: string
      social_media_url:
        type: string
      user_id:
        type: string
    required:
    - name
    - social_media_url
    type: object
info:
  contact: {}
paths:
  /account:
    get:
      description: get an user account
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: get user account
      tags:
      - User
    post:
      consumes:
      - application/json
      description: create user by inputing the correct user datas
      parameters:
      - description: Create Account Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CreateAccount'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: create user
      tags:
      - User
  /account/login:
    post:
      consumes:
      - application/json
      description: fetch user information by id
      parameters:
      - description: Login Account Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginAccount'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: finding user record
      tags:
      - User
  /comment:
    post:
      consumes:
      - application/json
      description: Creates a new comment with the provided data
      parameters:
      - description: Create Comment Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/comment.CommentCreate'
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new comment
      tags:
      - Comment
  /comment/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a comment with the given id
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a comment by ID
      tags:
      - Comment
    get:
      consumes:
      - application/json
      description: Fetch a comment with the given id
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Find a comment by ID
      tags:
      - Comment
    put:
      consumes:
      - application/json
      description: Updates an existing photo with the provided data
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create Comment Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing photo by id
      tags:
      - Comment
  /comment/all:
    get:
      description: fetch all comment records
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: finds all comment records
      tags:
      - Comment
  /photo:
    post:
      consumes:
      - application/json
      description: Creates a new photo with the provided data
      parameters:
      - description: Create Photo Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/photo.PhotoCreate'
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new photo
      tags:
      - Photo
  /photo/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a photo with the given id
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a photo by ID
      tags:
      - Photo
    get:
      consumes:
      - application/json
      description: Fetch a photo with the given id
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Find a photo by ID
      tags:
      - Photo
    put:
      consumes:
      - application/json
      description: Updates an existing photo with the provided data
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create Photo Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Photo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing photo by id
      tags:
      - Photo
  /photo/all:
    get:
      description: fetch all photo records
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: finds all photo records
      tags:
      - Photo
  /socialmedia:
    post:
      consumes:
      - application/json
      description: Creates a new social media with the provided data
      parameters:
      - description: Create Social Media Request Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/socialmedia.SocialMediaCreate'
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Create a new social media
      tags:
      - Social Media
  /socialmedia/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a social media with the given id
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Delete a social media by ID
      tags:
      - Social Media
    get:
      consumes:
      - application/json
      description: Fetch a social media with the given id
      parameters:
      - description: SocialMedia ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Find a social media by ID
      tags:
      - Social Media
    put:
      consumes:
      - application/json
      description: Updates an existing social media with the provided data
      parameters:
      - description: SocialMedia ID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Create Social Media Request Body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Update an existing social media by id
      tags:
      - Social Media
  /socialmedia/all:
    get:
      description: fetch all social media records
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.SuccessResponse'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: finds all social media records
      tags:
      - Social Media
swagger: "2.0"
